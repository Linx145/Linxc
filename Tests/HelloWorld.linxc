#include <Linxc.h>

struct structE
{
    void FunctionX()
    {

    }
};
struct structD
{
    structE E;
};
struct structC
{
    structD FunctionD(i32 something)
    {
        structD result;
        return result;
    }
};

i32 Main()
{
    structC C;
    C.FunctionD(2).E.FunctionX();
    return 0;
}

// struct structC
// {
//     i32 value;
// };

// struct structB
// {
//     float floatingPoint;
//     structC functionB()
//     {
//         structC result;
//         result.value = (i32)floatingPoint;
//         return result;
//     }
// };

// struct structA
// {
//     bool boolean;
//     structB functionA()
//     {
//         structB result;
//         result.floatingPoint = 5.0f;
//         return result;
//     }
// };

// i32 Main()
// {
//     structA A;
//     A.functionA().functionB();
//     return 0;
// }

// namespace MyNamespace
// {
//     struct MyStruct
//     {
//         struct NestedStruct
//         {
//             float X;
//             float Y;
//             void IncrementX(float amount)
//             {
//                 X += amount;
//             }
//         };
//         i32 A;
//         float B;
//         bool C;
//         NestedStruct nestedStructInstance;

//         void DoStuff(i32 amount, float mult)
//         {
//             A = (i32)(amount * mult);
//         }
//     };
//     MyStruct NewStructure()
//     {
//         MyStruct result;
//         result.A = 32;
//         result.B = 16.5f;
//         result.C = true;
//         return result;
//     }
// }
// i32 Main()
// {
//     MyNamespace::MyStruct variable = MyNamespace::NewStructure();
//     variable.DoStuff(32, 16.5f);
//     variable.nestedStructInstance.IncrementX(5.0f);
//     return 0;
// }